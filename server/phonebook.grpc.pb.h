// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: phonebook.proto
#ifndef GRPC_phonebook_2eproto__INCLUDED
#define GRPC_phonebook_2eproto__INCLUDED

#include "phonebook.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class PhonebookService final {
 public:
  static constexpr char const* service_full_name() {
    return "PhonebookService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AddContact(::grpc::ClientContext* context, const ::Contact& request, ::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>> AsyncAddContact(::grpc::ClientContext* context, const ::Contact& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>>(AsyncAddContactRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>> PrepareAsyncAddContact(::grpc::ClientContext* context, const ::Contact& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>>(PrepareAsyncAddContactRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveContact(::grpc::ClientContext* context, const ::ContactId& request, ::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>> AsyncRemoveContact(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>>(AsyncRemoveContactRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>> PrepareAsyncRemoveContact(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Status>>(PrepareAsyncRemoveContactRaw(context, request, cq));
    }
    virtual ::grpc::Status SearchContacts(::grpc::ClientContext* context, const ::SearchQuery& request, ::Contacts* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Contacts>> AsyncSearchContacts(::grpc::ClientContext* context, const ::SearchQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Contacts>>(AsyncSearchContactsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Contacts>> PrepareAsyncSearchContacts(::grpc::ClientContext* context, const ::SearchQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Contacts>>(PrepareAsyncSearchContactsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetContact(::grpc::ClientContext* context, const ::ContactId& request, ::Contact* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Contact>> AsyncGetContact(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Contact>>(AsyncGetContactRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Contact>> PrepareAsyncGetContact(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Contact>>(PrepareAsyncGetContactRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void AddContact(::grpc::ClientContext* context, const ::Contact* request, ::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddContact(::grpc::ClientContext* context, const ::Contact* request, ::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddContact(::grpc::ClientContext* context, const ::Contact* request, ::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RemoveContact(::grpc::ClientContext* context, const ::ContactId* request, ::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveContact(::grpc::ClientContext* context, const ::ContactId* request, ::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveContact(::grpc::ClientContext* context, const ::ContactId* request, ::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SearchContacts(::grpc::ClientContext* context, const ::SearchQuery* request, ::Contacts* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchContacts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Contacts* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SearchContacts(::grpc::ClientContext* context, const ::SearchQuery* request, ::Contacts* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SearchContacts(::grpc::ClientContext* context, const ::SearchQuery* request, ::Contacts* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SearchContacts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Contacts* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SearchContacts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Contacts* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetContact(::grpc::ClientContext* context, const ::ContactId* request, ::Contact* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Contact* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetContact(::grpc::ClientContext* context, const ::ContactId* request, ::Contact* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetContact(::grpc::ClientContext* context, const ::ContactId* request, ::Contact* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Contact* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Contact* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Status>* AsyncAddContactRaw(::grpc::ClientContext* context, const ::Contact& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Status>* PrepareAsyncAddContactRaw(::grpc::ClientContext* context, const ::Contact& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Status>* AsyncRemoveContactRaw(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Status>* PrepareAsyncRemoveContactRaw(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Contacts>* AsyncSearchContactsRaw(::grpc::ClientContext* context, const ::SearchQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Contacts>* PrepareAsyncSearchContactsRaw(::grpc::ClientContext* context, const ::SearchQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Contact>* AsyncGetContactRaw(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Contact>* PrepareAsyncGetContactRaw(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AddContact(::grpc::ClientContext* context, const ::Contact& request, ::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>> AsyncAddContact(::grpc::ClientContext* context, const ::Contact& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>>(AsyncAddContactRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>> PrepareAsyncAddContact(::grpc::ClientContext* context, const ::Contact& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>>(PrepareAsyncAddContactRaw(context, request, cq));
    }
    ::grpc::Status RemoveContact(::grpc::ClientContext* context, const ::ContactId& request, ::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>> AsyncRemoveContact(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>>(AsyncRemoveContactRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>> PrepareAsyncRemoveContact(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Status>>(PrepareAsyncRemoveContactRaw(context, request, cq));
    }
    ::grpc::Status SearchContacts(::grpc::ClientContext* context, const ::SearchQuery& request, ::Contacts* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Contacts>> AsyncSearchContacts(::grpc::ClientContext* context, const ::SearchQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Contacts>>(AsyncSearchContactsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Contacts>> PrepareAsyncSearchContacts(::grpc::ClientContext* context, const ::SearchQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Contacts>>(PrepareAsyncSearchContactsRaw(context, request, cq));
    }
    ::grpc::Status GetContact(::grpc::ClientContext* context, const ::ContactId& request, ::Contact* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Contact>> AsyncGetContact(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Contact>>(AsyncGetContactRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Contact>> PrepareAsyncGetContact(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Contact>>(PrepareAsyncGetContactRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void AddContact(::grpc::ClientContext* context, const ::Contact* request, ::Status* response, std::function<void(::grpc::Status)>) override;
      void AddContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddContact(::grpc::ClientContext* context, const ::Contact* request, ::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddContact(::grpc::ClientContext* context, const ::Contact* request, ::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveContact(::grpc::ClientContext* context, const ::ContactId* request, ::Status* response, std::function<void(::grpc::Status)>) override;
      void RemoveContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveContact(::grpc::ClientContext* context, const ::ContactId* request, ::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveContact(::grpc::ClientContext* context, const ::ContactId* request, ::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SearchContacts(::grpc::ClientContext* context, const ::SearchQuery* request, ::Contacts* response, std::function<void(::grpc::Status)>) override;
      void SearchContacts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Contacts* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SearchContacts(::grpc::ClientContext* context, const ::SearchQuery* request, ::Contacts* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SearchContacts(::grpc::ClientContext* context, const ::SearchQuery* request, ::Contacts* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SearchContacts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Contacts* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SearchContacts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Contacts* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetContact(::grpc::ClientContext* context, const ::ContactId* request, ::Contact* response, std::function<void(::grpc::Status)>) override;
      void GetContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Contact* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetContact(::grpc::ClientContext* context, const ::ContactId* request, ::Contact* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetContact(::grpc::ClientContext* context, const ::ContactId* request, ::Contact* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Contact* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Contact* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Status>* AsyncAddContactRaw(::grpc::ClientContext* context, const ::Contact& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Status>* PrepareAsyncAddContactRaw(::grpc::ClientContext* context, const ::Contact& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Status>* AsyncRemoveContactRaw(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Status>* PrepareAsyncRemoveContactRaw(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Contacts>* AsyncSearchContactsRaw(::grpc::ClientContext* context, const ::SearchQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Contacts>* PrepareAsyncSearchContactsRaw(::grpc::ClientContext* context, const ::SearchQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Contact>* AsyncGetContactRaw(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Contact>* PrepareAsyncGetContactRaw(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddContact_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveContact_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchContacts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetContact_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AddContact(::grpc::ServerContext* context, const ::Contact* request, ::Status* response);
    virtual ::grpc::Status RemoveContact(::grpc::ServerContext* context, const ::ContactId* request, ::Status* response);
    virtual ::grpc::Status SearchContacts(::grpc::ServerContext* context, const ::SearchQuery* request, ::Contacts* response);
    virtual ::grpc::Status GetContact(::grpc::ServerContext* context, const ::ContactId* request, ::Contact* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddContact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddContact() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddContact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddContact(::grpc::ServerContext* /*context*/, const ::Contact* /*request*/, ::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddContact(::grpc::ServerContext* context, ::Contact* request, ::grpc::ServerAsyncResponseWriter< ::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveContact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveContact() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RemoveContact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveContact(::grpc::ServerContext* /*context*/, const ::ContactId* /*request*/, ::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveContact(::grpc::ServerContext* context, ::ContactId* request, ::grpc::ServerAsyncResponseWriter< ::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchContacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchContacts() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SearchContacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchContacts(::grpc::ServerContext* /*context*/, const ::SearchQuery* /*request*/, ::Contacts* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchContacts(::grpc::ServerContext* context, ::SearchQuery* request, ::grpc::ServerAsyncResponseWriter< ::Contacts>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetContact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetContact() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetContact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContact(::grpc::ServerContext* /*context*/, const ::ContactId* /*request*/, ::Contact* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContact(::grpc::ServerContext* context, ::ContactId* request, ::grpc::ServerAsyncResponseWriter< ::Contact>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddContact<WithAsyncMethod_RemoveContact<WithAsyncMethod_SearchContacts<WithAsyncMethod_GetContact<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddContact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddContact() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Contact, ::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Contact* request, ::Status* response) { return this->AddContact(context, request, response); }));}
    void SetMessageAllocatorFor_AddContact(
        ::grpc::experimental::MessageAllocator< ::Contact, ::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Contact, ::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddContact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddContact(::grpc::ServerContext* /*context*/, const ::Contact* /*request*/, ::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddContact(
      ::grpc::CallbackServerContext* /*context*/, const ::Contact* /*request*/, ::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddContact(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Contact* /*request*/, ::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveContact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveContact() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ContactId, ::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ContactId* request, ::Status* response) { return this->RemoveContact(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveContact(
        ::grpc::experimental::MessageAllocator< ::ContactId, ::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ContactId, ::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveContact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveContact(::grpc::ServerContext* /*context*/, const ::ContactId* /*request*/, ::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveContact(
      ::grpc::CallbackServerContext* /*context*/, const ::ContactId* /*request*/, ::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveContact(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ContactId* /*request*/, ::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SearchContacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SearchContacts() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::SearchQuery, ::Contacts>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::SearchQuery* request, ::Contacts* response) { return this->SearchContacts(context, request, response); }));}
    void SetMessageAllocatorFor_SearchContacts(
        ::grpc::experimental::MessageAllocator< ::SearchQuery, ::Contacts>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::SearchQuery, ::Contacts>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SearchContacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchContacts(::grpc::ServerContext* /*context*/, const ::SearchQuery* /*request*/, ::Contacts* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SearchContacts(
      ::grpc::CallbackServerContext* /*context*/, const ::SearchQuery* /*request*/, ::Contacts* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SearchContacts(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::SearchQuery* /*request*/, ::Contacts* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetContact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetContact() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::ContactId, ::Contact>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ContactId* request, ::Contact* response) { return this->GetContact(context, request, response); }));}
    void SetMessageAllocatorFor_GetContact(
        ::grpc::experimental::MessageAllocator< ::ContactId, ::Contact>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::ContactId, ::Contact>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetContact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContact(::grpc::ServerContext* /*context*/, const ::ContactId* /*request*/, ::Contact* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetContact(
      ::grpc::CallbackServerContext* /*context*/, const ::ContactId* /*request*/, ::Contact* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetContact(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ContactId* /*request*/, ::Contact* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_AddContact<ExperimentalWithCallbackMethod_RemoveContact<ExperimentalWithCallbackMethod_SearchContacts<ExperimentalWithCallbackMethod_GetContact<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_AddContact<ExperimentalWithCallbackMethod_RemoveContact<ExperimentalWithCallbackMethod_SearchContacts<ExperimentalWithCallbackMethod_GetContact<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddContact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddContact() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddContact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddContact(::grpc::ServerContext* /*context*/, const ::Contact* /*request*/, ::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveContact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveContact() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RemoveContact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveContact(::grpc::ServerContext* /*context*/, const ::ContactId* /*request*/, ::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchContacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchContacts() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SearchContacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchContacts(::grpc::ServerContext* /*context*/, const ::SearchQuery* /*request*/, ::Contacts* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetContact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetContact() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetContact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContact(::grpc::ServerContext* /*context*/, const ::ContactId* /*request*/, ::Contact* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddContact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddContact() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddContact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddContact(::grpc::ServerContext* /*context*/, const ::Contact* /*request*/, ::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddContact(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveContact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveContact() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RemoveContact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveContact(::grpc::ServerContext* /*context*/, const ::ContactId* /*request*/, ::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveContact(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchContacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchContacts() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SearchContacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchContacts(::grpc::ServerContext* /*context*/, const ::SearchQuery* /*request*/, ::Contacts* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchContacts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetContact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetContact() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetContact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContact(::grpc::ServerContext* /*context*/, const ::ContactId* /*request*/, ::Contact* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContact(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddContact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddContact() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddContact(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddContact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddContact(::grpc::ServerContext* /*context*/, const ::Contact* /*request*/, ::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddContact(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddContact(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveContact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveContact() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveContact(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveContact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveContact(::grpc::ServerContext* /*context*/, const ::ContactId* /*request*/, ::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveContact(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveContact(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SearchContacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SearchContacts() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SearchContacts(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SearchContacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchContacts(::grpc::ServerContext* /*context*/, const ::SearchQuery* /*request*/, ::Contacts* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SearchContacts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SearchContacts(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetContact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetContact() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetContact(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetContact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContact(::grpc::ServerContext* /*context*/, const ::ContactId* /*request*/, ::Contact* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetContact(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetContact(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddContact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddContact() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Contact, ::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::Contact, ::Status>* streamer) {
                       return this->StreamedAddContact(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddContact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddContact(::grpc::ServerContext* /*context*/, const ::Contact* /*request*/, ::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddContact(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Contact,::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveContact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveContact() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ContactId, ::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ContactId, ::Status>* streamer) {
                       return this->StreamedRemoveContact(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveContact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveContact(::grpc::ServerContext* /*context*/, const ::ContactId* /*request*/, ::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveContact(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ContactId,::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchContacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SearchContacts() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SearchQuery, ::Contacts>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::SearchQuery, ::Contacts>* streamer) {
                       return this->StreamedSearchContacts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SearchContacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchContacts(::grpc::ServerContext* /*context*/, const ::SearchQuery* /*request*/, ::Contacts* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchContacts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SearchQuery,::Contacts>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetContact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetContact() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ContactId, ::Contact>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::ContactId, ::Contact>* streamer) {
                       return this->StreamedGetContact(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetContact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetContact(::grpc::ServerContext* /*context*/, const ::ContactId* /*request*/, ::Contact* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetContact(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ContactId,::Contact>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddContact<WithStreamedUnaryMethod_RemoveContact<WithStreamedUnaryMethod_SearchContacts<WithStreamedUnaryMethod_GetContact<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddContact<WithStreamedUnaryMethod_RemoveContact<WithStreamedUnaryMethod_SearchContacts<WithStreamedUnaryMethod_GetContact<Service > > > > StreamedService;
};


#endif  // GRPC_phonebook_2eproto__INCLUDED
