// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: phonebook.proto

#include "phonebook.pb.h"
#include "phonebook.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* PhonebookService_method_names[] = {
  "/PhonebookService/AddContact",
  "/PhonebookService/RemoveContact",
  "/PhonebookService/SearchContacts",
  "/PhonebookService/GetContact",
};

std::unique_ptr< PhonebookService::Stub> PhonebookService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PhonebookService::Stub> stub(new PhonebookService::Stub(channel));
  return stub;
}

PhonebookService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AddContact_(PhonebookService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveContact_(PhonebookService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchContacts_(PhonebookService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContact_(PhonebookService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PhonebookService::Stub::AddContact(::grpc::ClientContext* context, const ::Contact& request, ::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddContact_, context, request, response);
}

void PhonebookService::Stub::experimental_async::AddContact(::grpc::ClientContext* context, const ::Contact* request, ::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddContact_, context, request, response, std::move(f));
}

void PhonebookService::Stub::experimental_async::AddContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddContact_, context, request, response, std::move(f));
}

void PhonebookService::Stub::experimental_async::AddContact(::grpc::ClientContext* context, const ::Contact* request, ::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddContact_, context, request, response, reactor);
}

void PhonebookService::Stub::experimental_async::AddContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddContact_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Status>* PhonebookService::Stub::AsyncAddContactRaw(::grpc::ClientContext* context, const ::Contact& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Status>::Create(channel_.get(), cq, rpcmethod_AddContact_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Status>* PhonebookService::Stub::PrepareAsyncAddContactRaw(::grpc::ClientContext* context, const ::Contact& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Status>::Create(channel_.get(), cq, rpcmethod_AddContact_, context, request, false);
}

::grpc::Status PhonebookService::Stub::RemoveContact(::grpc::ClientContext* context, const ::ContactId& request, ::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveContact_, context, request, response);
}

void PhonebookService::Stub::experimental_async::RemoveContact(::grpc::ClientContext* context, const ::ContactId* request, ::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveContact_, context, request, response, std::move(f));
}

void PhonebookService::Stub::experimental_async::RemoveContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveContact_, context, request, response, std::move(f));
}

void PhonebookService::Stub::experimental_async::RemoveContact(::grpc::ClientContext* context, const ::ContactId* request, ::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveContact_, context, request, response, reactor);
}

void PhonebookService::Stub::experimental_async::RemoveContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveContact_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Status>* PhonebookService::Stub::AsyncRemoveContactRaw(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Status>::Create(channel_.get(), cq, rpcmethod_RemoveContact_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Status>* PhonebookService::Stub::PrepareAsyncRemoveContactRaw(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Status>::Create(channel_.get(), cq, rpcmethod_RemoveContact_, context, request, false);
}

::grpc::Status PhonebookService::Stub::SearchContacts(::grpc::ClientContext* context, const ::SearchQuery& request, ::Contacts* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SearchContacts_, context, request, response);
}

void PhonebookService::Stub::experimental_async::SearchContacts(::grpc::ClientContext* context, const ::SearchQuery* request, ::Contacts* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SearchContacts_, context, request, response, std::move(f));
}

void PhonebookService::Stub::experimental_async::SearchContacts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Contacts* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SearchContacts_, context, request, response, std::move(f));
}

void PhonebookService::Stub::experimental_async::SearchContacts(::grpc::ClientContext* context, const ::SearchQuery* request, ::Contacts* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SearchContacts_, context, request, response, reactor);
}

void PhonebookService::Stub::experimental_async::SearchContacts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Contacts* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SearchContacts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Contacts>* PhonebookService::Stub::AsyncSearchContactsRaw(::grpc::ClientContext* context, const ::SearchQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Contacts>::Create(channel_.get(), cq, rpcmethod_SearchContacts_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Contacts>* PhonebookService::Stub::PrepareAsyncSearchContactsRaw(::grpc::ClientContext* context, const ::SearchQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Contacts>::Create(channel_.get(), cq, rpcmethod_SearchContacts_, context, request, false);
}

::grpc::Status PhonebookService::Stub::GetContact(::grpc::ClientContext* context, const ::ContactId& request, ::Contact* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetContact_, context, request, response);
}

void PhonebookService::Stub::experimental_async::GetContact(::grpc::ClientContext* context, const ::ContactId* request, ::Contact* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetContact_, context, request, response, std::move(f));
}

void PhonebookService::Stub::experimental_async::GetContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Contact* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetContact_, context, request, response, std::move(f));
}

void PhonebookService::Stub::experimental_async::GetContact(::grpc::ClientContext* context, const ::ContactId* request, ::Contact* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetContact_, context, request, response, reactor);
}

void PhonebookService::Stub::experimental_async::GetContact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Contact* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetContact_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Contact>* PhonebookService::Stub::AsyncGetContactRaw(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Contact>::Create(channel_.get(), cq, rpcmethod_GetContact_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Contact>* PhonebookService::Stub::PrepareAsyncGetContactRaw(::grpc::ClientContext* context, const ::ContactId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Contact>::Create(channel_.get(), cq, rpcmethod_GetContact_, context, request, false);
}

PhonebookService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhonebookService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhonebookService::Service, ::Contact, ::Status>(
          [](PhonebookService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::Contact* req,
             ::Status* resp) {
               return service->AddContact(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhonebookService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhonebookService::Service, ::ContactId, ::Status>(
          [](PhonebookService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::ContactId* req,
             ::Status* resp) {
               return service->RemoveContact(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhonebookService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhonebookService::Service, ::SearchQuery, ::Contacts>(
          [](PhonebookService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::SearchQuery* req,
             ::Contacts* resp) {
               return service->SearchContacts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhonebookService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhonebookService::Service, ::ContactId, ::Contact>(
          [](PhonebookService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::ContactId* req,
             ::Contact* resp) {
               return service->GetContact(ctx, req, resp);
             }, this)));
}

PhonebookService::Service::~Service() {
}

::grpc::Status PhonebookService::Service::AddContact(::grpc::ServerContext* context, const ::Contact* request, ::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhonebookService::Service::RemoveContact(::grpc::ServerContext* context, const ::ContactId* request, ::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhonebookService::Service::SearchContacts(::grpc::ServerContext* context, const ::SearchQuery* request, ::Contacts* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PhonebookService::Service::GetContact(::grpc::ServerContext* context, const ::ContactId* request, ::Contact* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


